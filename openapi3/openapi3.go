package openapi3

const description = `
This is the autogenerated OpenAPI documentation for your [Fuego](https://github.com/go-fuego/fuego) API.

Below is a Fuego Cheatsheet to help you get started. Don't hesitate to check the [Fuego documentation](https://go-fuego.github.io/fuego) for more details.

Happy coding! ðŸ”¥

## Usage

### Route registration

` + "```go" + `
func main() {
	// Create a new server
	s := fuego.NewServer()

	// Register some routes
	fuego.Post(s, "/hello", myController)
	fuego.Get(s, "/myPath", otherController)
	fuego.Put(s, "/hello", thirdController)

	adminRoutes := fuego.Group(s, "/admin")
	fuego.Use(adminRoutes, myMiddleware) // This middleware (for authentication, etc...) will be available for routes starting by /admin/*, 
	fuego.Get(adminRoutes, "/hello", groupController) // This route will be available at /admin/hello

	// Start the server
	s.Start()
}
` + "```" + `

### Basic controller

` + "```go" + `
type MyBody struct {
	Name string ` + "`json:\"name\" validate:\"required,max=30\"`" + `
}

type MyResponse struct {
	Answer string ` + "`json:\"answer\"`" + `
}

func hello(ctx *fuego.ContextWithBody[MyBody]) (*MyResponse, error) {
	body, err := ctx.Body()
	if err != nil {
		return nil, err
	}

	return &MyResponse{Answer: "Hello " + body.Name}, nil
}
` + "```" + `

### Add more details to the route

` + "```go" + `
fuego.Get(s, "/hello", myController).
	Description("This is a route that says hello").
	Summary("Say hello").
` + "```" + `
`

func NewDocument() Document {
	return Document{
		OpenAPI: "3.1.0",
		Info: Info{
			Title:       "OpenAPI",
			Description: description,
			Version:     "0.1.0",
		},
		Paths:      make(Paths),
		Components: NewComponents(),
	}
}

type Document struct {
	OpenAPI string `json:"openapi" yaml:"openapi"`
	Info    Info   `json:"info" yaml:"info"`

	Paths      Paths      `json:"paths" yaml:"paths"`
	Components Components `json:"components" yaml:"components"`
}

type Paths map[string]map[string]*Operation

func (p Paths) AddPath(path string, method string, pathItem *Operation) {
	if p[path] == nil {
		p[path] = make(map[string]*Operation)
	}
	p[path][method] = pathItem
}

type Info struct {
	Title       string `json:"title" yaml:"title"`
	Description string `json:"description" yaml:"description"`
	Version     string `json:"version" yaml:"version"`
}

type Schema struct {
	Type       string            `json:"type,omitempty" yaml:"type"`
	Format     string            `json:"format,omitempty" yaml:"format,omitempty"`
	Required   []string          `json:"required,omitempty" yaml:"required,omitempty"`
	Nullable   bool              `json:"nullable,omitempty" yaml:"nullable,omitempty"`
	Example    string            `json:"example,omitempty" yaml:"example,omitempty"`
	Properties map[string]Schema `json:"properties,omitempty" yaml:"properties,omitempty"`
	Items      *Schema           `json:"items,omitempty" yaml:"items,omitempty"`
	MinLength  int               `json:"minLength,omitempty" yaml:"minLength,omitempty"`
	MaxLength  int               `json:"maxLength,omitempty" yaml:"maxLength,omitempty"`
	Minimum    int               `json:"minimum,omitempty" yaml:"minimum,omitempty"`
	Maximum    int               `json:"maximum,omitempty" yaml:"maximum,omitempty"`
	Ref        string            `json:"$ref,omitempty" yaml:"$ref,omitempty"`
}

type Parameter struct {
	Name        string `json:"name" yaml:"name"`
	In          string `json:"in" yaml:"in"`
	Description string `json:"description" yaml:"description"`
	Required    bool   `json:"required" yaml:"required"`
	Schema      Schema `json:"schema" yaml:"schema"`
	Example     string `json:"example,omitempty" yaml:"example"`
}

type MimeType string

type Response struct {
	Description string                    `json:"description" yaml:"description"`
	Content     map[MimeType]SchemaObject `json:"content" yaml:"content"`
}

type SchemaObject struct {
	Schema *Schema `json:"schema" yaml:"schema"`
}

type Operation struct {
	OperationID string               `json:"operationId" yaml:"operationId"`
	Summary     string               `json:"summary" yaml:"summary"`
	Description string               `json:"description" yaml:"description"`
	Deprecated  bool                 `json:"deprecated,omitempty" yaml:"deprecated"`
	RequestBody *RequestBody         `json:"requestBody,omitempty" yaml:"requestBody"`
	Parameters  []*Parameter         `json:"parameters,omitempty" yaml:"parameters"`
	Tags        []string             `json:"tags,omitempty" yaml:"tags"`
	Responses   map[string]*Response `json:"responses,omitempty" yaml:"responses"`
}

type RequestBody struct {
	Required bool                      `json:"required" yaml:"required"`
	Content  map[MimeType]SchemaObject `json:"content" yaml:"content"`
	Ref      string                    `json:"$ref,omitempty" yaml:"$ref,omitempty"`
}

type Parameters struct {
	Name string `json:"name" yaml:"name"`
	In   string `json:"in" yaml:"in"`
}

func NewComponents() Components {
	return Components{
		Schemas:       make(map[string]*Schema),
		RequestBodies: make(map[string]*RequestBody),
	}
}

type Components struct {
	Schemas       map[string]*Schema      `json:"schemas" yaml:"schemas"`
	RequestBodies map[string]*RequestBody `json:"requestBodies" yaml:"requestBodies"`
}
